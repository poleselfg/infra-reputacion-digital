input {
  http {
    port => 9443
  }
}

filter {
  # we enforce that every document will have date and time fields.
  if ![date] {
    ruby { code => "event.set('date', Time.now.strftime('%Y-%m-%d'))" }
  }
  if ![time] {
    ruby { code => "event.set('time', Time.now.strftime('%H:%M'))" }
  }

  # create a metadata.year based on the original date field
  mutate { copy => { "date" => "[@metadata][year]" } }
  # get YEAR, i.e., for 2019-01-11 => 2019-01
  mutate { gsub => ["[@metadata][year]", "-[0-9][0-9]-[0-9][0-9][^-]*$", ""] }

  ###################################################
  # every new document should have sa_manual = false
  ###################################################
  mutate {
    add_field => { "[@metadata][sa_manual_check]" => "non existing field" }
    copy => { "sa_manual" => "[@metadata][sa_manual_check]" }
  }
  if [@metadata][sa_manual_check] == "non existing field" {
    mutate {
      add_field => { "sa_manual" => false }
    }
  }
  mutate {
    convert => { "sa_manual" => "boolean" }
  }

  ########################
  # generate a custom id
  ########################
  fingerprint {
    source => [ "content", "date", "time", "author", "category", "domain", "source", "type", "title" ]
    method => "SHA1"
    concatenate_sources => true
    key => "thisiswhatyouget"
    target => "[@metadata][generated_id]"
  }
  
  ######################################
  # parse date and time into @timestamp
  ######################################
  mutate {
    add_field => { "[@metadata][timestamp]" => "%{[date]} %{[time]}" }
  }
  date {
    match => ["[@metadata][timestamp]", "YYYY-MM-dd HH:mm"]
    timezone => "UTC"
  }

  #########################################
  # creates words array from content field
  #########################################
  if ![words] {
    mutate {
      add_field => { "words" => "%{[content]}" }
    }
    mutate {
      split => { "words" => " " }
    }
  }

  #########################################
  # check for cache setting
  #########################################
  mutate {
    add_field => { "[@metadata][senti_use_cache_check]" => "non existing field" }
    copy => { "senti_use_cache" => "[@metadata][senti_use_cache_check]" }
  }
  if [@metadata][senti_use_cache_check] == "non existing field" {
    mutate {
      add_field => { "senti_use_cache" => false }
    }
  }
  mutate {
    convert => { "senti_use_cache" => "boolean" }
  }

  #############################
  # sentiment analysis section
  #############################
  if [type] and ![sa_manual] and (![is_migration] or [_force_senti]) and [content] {
    rest {
        request => {
          auth => {
            user => "klean"
            password => "5iZrmpBqQk8qzik8kpJqzCRL"
          }
          url => "https://senti.reputacion.digital/api/v2/profiles/rd/%{[type]}/analyze?useCache=%{[senti_use_cache]}"
          json => true
          method => "post"
          sprintf => true
          headers => {
            "Content-Type" => "application/json"
          }
          params => {
            "text" => "%{[content]}"
          }
        }
        target => "[@metadata][sentiData]"
        fallback => {
          error => "some error while running sentiment analysis"
        }
      }
      if ([@metadata][sentiData]) {
        mutate {
          copy => { 
            "[@metadata][sentiData][sentiment]" => "sentiment"
          }
          add_field => {
            sentimentWeight => "%{[@metadata][sentiData][sentimentWeight]}"
            analysisId => "%{[@metadata][sentiData][id]}"
          }
        }
        if [sentiment] == "-1" {
          mutate { add_field => { "sentiment_word" => "negative" } }
        } else if [sentiment] == "0" {
          mutate { add_field => { "sentiment_word" => "neutral" } }
        } else if [sentiment] == "1" {
          mutate { add_field => { "sentiment_word" => "positive" } }
        }
      }
  } else if ![content] {
    mutate { add_tag => [ "Unable to execute sentiment analysis: 'content' field missing." ] }
  } else if [sa_manual] {
    mutate { add_tag => [ "Sentiment analysis avoided: 'sa_manual' set to true." ] }
  } else if [is_migration] {
    mutate { add_tag => [ "Sentiment analysis avoided: 'is_migration' is set to true but '_force_senti' is missing." ] }
  } else {
    mutate { add_tag => [ "Unable to execute sentiment analysis." ] }
  }
}

output {


  stdout {}


  ############################################################
  # if debug field is present, don't push it to elasticsearch
  ############################################################
  if [debug] {
    stdout {}
  } else {
    if [type] and ![is_migration] and [@metadata][generated_id] and "_dateparsefailure" not in [tags] {
      ########################################################################################
      # if type field is present and it is not a migration, send the event to in-[type] index
      ########################################################################################
      elasticsearch {
        index => "in-%{[type]}-%{[@metadata][year]}"
        document_id => "%{[@metadata][generated_id]}"
        template => "/opt/logstash/templates/logstash.json"
        template_overwrite => true
        hosts => ["elasticsearch-node1","elasticsearch-node2","elasticsearch-node3"]
        user => "elastic"
        password => "0nStero1d"
        action => "update"
        doc_as_upsert => true
        retry_on_conflict => 5
        script => "ctx._source.replaceAll((key, value) -> {
          /* if sentiment was manually updated, do not update with event data */
          if (ctx._source.sa_manual && key == 'sentiment') {
            return value;
          }
          /* do not update sa_manual field, never. This should be done externally. */
          if (key == 'sa_manual') {
            return value;
          }
          return params.event.get(key);
        })"
      }
    } else if ![type] {
      ##################################################################
      # if type field is not present, send the event to errors index
      ##################################################################
      elasticsearch {
        index => "errors-without-type"
        template_overwrite => true
        hosts => ["elasticsearch-node1","elasticsearch-node2","elasticsearch-node3"]
        user => "elastic"
        password => "0nStero1d"
      }
    } else if [is_migration] and "_dateparsefailure" not in [tags] {
      # this is a migration step, index received data
      elasticsearch {
        index => "in-%{[type]}-%{[@metadata][year]}"
        document_id => "%{[@metadata][generated_id]}"
        template => "/opt/logstash/templates/logstash.json"
        template_overwrite => true
        hosts => ["elasticsearch-node1","elasticsearch-node2","elasticsearch-node3"]
        user => "elastic"
        password => "0nStero1d"
      }
    } else {
      elasticsearch {
        index => "errors-%{[type]}"
        template => "/opt/logstash/templates/logstash.json"
        template_overwrite => true
        hosts => ["elasticsearch-node1","elasticsearch-node2","elasticsearch-node3"]
        user => "elastic"
        password => "0nStero1d"
      }
    }
  }
}
